import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { ApiService } from '../services/api.service';
import { Router } from '@angular/router';
import { HttpHeaders, HttpClientModule } from '@angular/common/http';
import {AuthService} from "../services/auth.service";

@Component({
  selector: 'app-login',
  standalone: true,
  imports:[FormsModule, RouterModule, HttpClientModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {

  loginData = {
    username: '',
    password: ''
  };

  constructor(private router: Router, private apiService : ApiService) { }
  // constructor(private router: Router, private apiService : ApiService, private authService : AuthService) { }

  ngOnInit(): void {
    const token = sessionStorage.getItem('token');
    if (token) {
      // showing that token was found
      console.log("has Jwt Token");
      const tokenDTO = { token: token };
      const headers = new HttpHeaders({ 'Content-Type': 'application/json' , 'Authorization': token });

      console.debug("SENDING TOKEN TO AuthSERVICE");
      this.apiService.post('validateToken', tokenDTO, headers).subscribe(
        response => {
          if (response.ok) {
            console.log("User has valid token :)");
          } else {
            console.error("INVALID TOKEN");
          }

        },
        error => {
          console.error('Login failed', error);
        }
      )

      /*
      // this.authService.validateToken(token).subscribe(
      //   result => {
      //     if (result.valid) {
      //       console.log("User has valid token :)", result.message);
      //     } else {
      //       console.error("INVALID TOKEN:", result.message);
      //     }
      //   },
      //   error => {
      //     console.error('Error occurred during token validation:', error);
      //   }
      // );
    }
       */
    }
  }

  onLogin() {
    const { username, password } = this.loginData;
    if (username && password) {
      this.apiService.post('login', this.loginData).subscribe(
        response => {
          const token = response.token;

          // token will only be given if the login was successful
          if (token) {
            // store JWT Token in the short-term session storage
            sessionStorage.setItem('token', token);
            // redirect to the home page
            this.router.navigate(['/home']);
          } else {
            console.error("Unsuccessful login");
          }
        },
        error => {
          // 401 status handling was helped generated by ChatGPT
          if (error.status === 401) {
            console.error('Login failed: Invalid username or password.');
          } else {
            console.error('Login failed', error);
          }
        }
      );
    } else {
      console.error('Please provide both username and password.');
    }
  }
}
